{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","ethereumAddress","setEthereumAddress","deployedContractTransactions","setDeployedContractTransactions","loadingText","setLoadingText","e","a","target","value","etherscanApiUrl","network","networkPostfix","fetchDataFor","url","deploymentTxns","fetch","then","response","json","data","transactions","result","length","filter","txn","contractAddress","map","Promise","all","index","prevState","transactionsCount","className","onChange","placeholder","onClick","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA+FeA,MA5Ff,WACE,IACA,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAwEF,mBAAS,IAAjF,mBAAOG,EAAP,KAAqCC,EAArC,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAJa,4CAMb,WAAqCC,GAArC,SAAAC,EAAA,sDACEN,EAAmBK,EAAEE,OAAOC,OAD9B,4CANa,sBAUb,SAASC,EAAgBV,EAAiBW,GACxC,IAAIC,EAAiB,GAIrB,MAHe,WAAXD,IACFC,EAAc,WAAOD,IAEjB,cAAN,OAAqBC,EAArB,kEAA6FZ,EAA7F,kDAdsB,sCADX,SAkBEa,EAlBF,8EAkBb,WAA4BF,GAA5B,iBAAAJ,EAAA,6DACMO,EAAMJ,EAAgBV,EAAiBW,GACvCI,EAAiB,GACrBV,EAAe,WAAD,OAAYM,EAAZ,UAHhB,SAIQK,MAAMF,GACTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAFG,uCAEE,WAAOG,GAAP,eAAAb,EAAA,4DACEc,EAAeD,EAAKE,QACTC,OAAS,GAFtB,sBAGFR,EAAiBM,EAAaG,QAAO,SAAAC,GAAG,MAA2B,IAAvBA,EAAIC,mBAAuBC,KAAI,SAAAF,GAAG,OAAIA,EAAIC,oBACnEH,OAAS,GAJ1B,gCAKMK,QAAQC,IAAId,EAAeY,IAAf,uCAAmB,WAAOD,EAAiBI,GAAxB,SAAAvB,EAAA,6DACnCO,EAAMJ,EAAgBgB,EAAiBf,GADJ,SAE7BK,MAAMF,GACTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJjB,GAAgC,SAAA4B,GAAS,4BAAQA,GAAR,CAAmB,CAACpB,UAASe,kBAAiBM,kBAAmBZ,EAAKE,OAAOC,gBALvF,2CAAnB,0DALlB,2CAFF,uDAJR,2CAlBa,oEA4Cb,sBAAAhB,EAAA,6DACEF,EAAe,IACfF,EAAgC,IAFlC,SAGQU,EAAa,WAHrB,uBAIQA,EAAa,WAJrB,uBAKQA,EAAa,WALrB,wBAMQA,EAAa,SANrB,yBAOQA,EAAa,UAPrB,QAQER,EAAe,IARjB,6CA5Ca,sBAuDb,OACE,qBAAK4B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,gBAAf,UACE,uBAAOC,SA3DF,4CA2DoCC,YAAY,qBACrD,wBAAQC,QA5DH,2CA4DqCC,SAAgC,GAAtBjC,EAAYmB,OAAhE,wBAEDnB,EAAYmB,OAAS,GACpB,qBAAKU,UAAU,eAAf,SAA+B7B,IAEhCF,EAA6BqB,OAAS,GACrC,kCACC,gCACE,+BACE,yCACA,kDACA,iDAGJ,gCACIrB,EAA6ByB,KAAI,SAACP,EAAMU,GACvC,OACE,+BACE,6BAAKV,EAAKT,UACV,6BAAKS,EAAKM,kBACV,6BAAKN,EAAKY,sBAHHF,iBCpEZQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b332133.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from \"react\";\n\nfunction App() {\n  const etherscanApiKey = \"QKASTDMZF1KG4EU9X8JEHQ8979SSPS996H\";\n  const [ethereumAddress, setEthereumAddress] = useState(\"\");\n  const [deployedContractTransactions, setDeployedContractTransactions] = useState([]);\n  const [loadingText, setLoadingText] = useState(\"\");\n\n  async function updateEthereumAddress(e) {\n    setEthereumAddress(e.target.value);\n  }\n\n  function etherscanApiUrl(ethereumAddress, network) {\n    let networkPostfix = \"\";\n    if (network != 'mainnet') {\n      networkPostfix = `-${network}`;\n    }\n    return `https://api${networkPostfix}.etherscan.io/api?module=account&action=txlist&address=${ethereumAddress}&startblock=0&endblock=99999999&apikey=${etherscanApiKey}`\n  }\n\n  async function fetchDataFor(network) {\n    let url = etherscanApiUrl(ethereumAddress, network);\n    let deploymentTxns = [];\n    setLoadingText(`Loading ${network} data`);\n    await fetch(url)\n      .then(response => response.json())\n      .then(async (data) => {\n        const transactions = data.result;\n        if (transactions.length > 0) {\n          deploymentTxns = transactions.filter(txn => txn.contractAddress != \"\").map(txn => txn.contractAddress);\n          if (deploymentTxns.length > 0) {\n            await Promise.all(deploymentTxns.map(async (contractAddress, index) => {\n              url = etherscanApiUrl(contractAddress, network);\n              await fetch(url)\n                .then(response => response.json())\n                .then(data => {\n                  setDeployedContractTransactions(prevState => [...prevState, {network, contractAddress, transactionsCount: data.result.length}])\n                }\n              );\n            }));\n          }\n        }\n      }\n    );\n  }\n\n  async function fetchTransactionDetails() {\n    setLoadingText(\"\");\n    setDeployedContractTransactions([]);\n    await fetchDataFor(\"mainnet\");\n    await fetchDataFor(\"ropsten\");\n    await fetchDataFor(\"rinkeby\");\n    await fetchDataFor(\"kovan\");\n    await fetchDataFor(\"goerli\");\n    setLoadingText(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"input-section\">\n          <input onChange={updateEthereumAddress}  placeholder=\"Ethereum address\"/>\n          <button onClick={fetchTransactionDetails} disabled={loadingText.length != 0}>Submit </button>\n        </div>\n        {loadingText.length > 0 &&\n          <div className=\"loading-text\">{loadingText}</div>\n        }\n        {deployedContractTransactions.length > 0 &&\n          <table>\n           <thead>\n             <tr>\n               <th>Network</th>\n               <th>Contract address</th>\n               <th>No of txns</th>\n             </tr>\n           </thead>\n           <tbody>\n              {deployedContractTransactions.map((data, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{data.network}</td>\n                    <td>{data.contractAddress}</td>\n                    <td>{data.transactionsCount}</td>\n                  </tr>\n                )\n              })}\n           </tbody>\n         </table>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}